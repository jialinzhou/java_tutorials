MVCC:多版本并发控制，这个技术可以让有着特定隔离级别的InnoDB事务执行一致性读操作，这就是说，查询那些正在被其他事务更新的行，可以看到在那些更新操作之前的值。这是提高并发性很强的技术
，不需要等待其他事务持有的锁就可以进行查询操作。

consistent read:一致性读，这是一种读操作，基于时间点，使用快照信息展示查询结果，不管在同一时间其他事务做的改变。如果被查询的
数据已经被其他事务改变，原始的数据可以通过undo log重新构建出来，这个技术可以避免加锁问题，加锁会降低并发，通过强制一个事务等待另一个事务完成。
对于可重复读隔离级别，快照的时间点是第一次读操作的时间。对于读已提交隔离级别，每一次一致性读操作都会重置快照。

InnoDB多版本：InnoDB是一个多版本的存储引擎：它保留改变的数据行旧的版本，可以支持并发和rollback。这些信息被存储在表空间中rollback segment数据结构。
InnoDB使用rollback segment中的信息去执行事务回滚过程中的undo操作。它也使用这些信息构建行记录的早期版本支持一致性读。
内部，InnoDB为存储在数据库中的每行数据增加三个字段。一个6字节的DB_TRX_ID字段表示上一个插入或更新行的事务标识符。同样，一个
删除操作内部也被当做update，这种情况下行记录中特殊的1个bit被设置标记删除。每行记录也包含一个7字节的DB_ROLL_PTR字段，叫做roll pointer.
这个roll pointer指向rollback segment中的一个undo log记录。如果这行记录被updated，这个undo log记录包含必要的信息可以重建出更新之前的记录内容。
还有一个6字节的DB_ROW_ID字段包含一个row ID，当新行被插入时，它会单调递增。如果InnoDB自动的生成聚集索引（也就是默认主键），索引中就会
包含这个row ID值。否则，DB_ROW_ID列不会出现在任何索引中。
在rollback segment中的undo log被分成insert undo log和update undo log。insert undo log仅在事务回滚时需要，并且事务一提交就可以丢弃。
update undo log也被用在一致性读，在一致性读中需要update undo log中的信息构建数据行的早期版本，只有在InnoDB为一致性读分配的快照中没有事务存在
时，这些update undo log才可以被丢弃。
经常的提交你的事务，包括那些只有一致性读的事务。否则，InnoDB不能丢弃update undo log中的数据，并且rollback segment可能变得更大，
填满表空间。
在InnoDB多版本方案中，当你通过sql语句删除一行记录时，该记录不会立刻从数据库中物理移除。只有当删除操作的update undo log被丢弃
之后，InnoDB才会物理移除相应的行记录和索引记录。这个移除操作称为purge。它非常快，通常执行的顺序与删除的sql语句相同顺序。



锁：读锁和写锁
读锁：共享锁、shared locks，s锁。
写锁：排他锁、Exclusive locks ，X锁。
select:不加锁。

对于普通select语句，InnoDB不会加任何锁。

####  select ....lock in share mode 将查找到的数据加上一个S锁，允许其他事务继续获取这些记录的S锁，不能获取这些记录的X锁（会阻塞）。
使用场景，读出数据后，其他事务不能修改，但是自己也不一定能修改，因为其他事务也可以使用“select ... lock in share mode"继续加读锁。

### select ... for update 将查找到的数据加上一个X锁，不允许其他事务获取这些记录的S锁和X锁。
使用场景：读出数据后，其他事务既不能写，也不能加读锁，那么就只有自己可以修改数据。

###写操作
DELETE：删除一条数据时，先对记录加X锁，再执行删除操作。
INSERT：插入一条记录时，会先加”隐式锁“来保护这条新插入的记录在本事务提交前不被别的事务访问到。
UPDATE：1）如果被更新的列，修改前后没有导致存储空间变化，那么会先给记录加X锁，再直接对记录进行修改
        2）如果被更新的列，修改前后导致存储空间发生了变化，那么会先给记录加X锁，然后将记录删除，再insert一条新记录。
隐式锁：一个事务插入一条记录后，还未提交，这条记录会保存本次事务id，而其他事务如果想来对这个记录加锁时会发现事务id不对应，这时会产生X锁，所以相当于在插入一条记录时，隐式的
给这条记录加了一把隐式X锁。



read committed:
1）使用主键查询for update：当手动事务时，只会对查询出的记录加写锁。
2）使用唯一索引：也是只对查询出的记录加写锁。
3）使用普通索引：也是只对查询出的记录加写锁。
4）不使用索引：也是只对查询出的记录加写锁。
对于insert不会加锁。
repeatable read:
1)使用普通索引 for update：只对查询出的记录加写锁。
对于insert会加间隙锁，在根据索引查询的记录相邻前后加间隙锁，导致插入不成功，较远的位置insert不受影响
2）不使用索引：对于整个表每行记录都加锁



InnoDB Row Formats:
一个表的行格式决定了它的行记录是如何物理存储的，从而可以影响查询和DML操作的性能。当单个硬盘页可以存放更多行记录，查询和
索引查找会更快，buffer pool中就需要更少的缓存内存，更新值需要更少的I/O。
每个表的数据是分页存储的。构成表的这些页是通过B-tree这种数据结构组织的。表数据和二级索引都是使用这种类型的数据结构。
代表着整个表的B-tree索引被称作clustered index，它是通过主键列组织的。聚集索引数据结构的节点包含一行中所有列的值。
二级索引数据结构包含索引列和主键列的值。
可变长度的列对于B-tree索引存储列值的规则来说是个例外。可变长度的列太长了不适合存储在B-tree的页上，因此被存储在单独分配的
硬盘页叫做overflow pages。这种列被称作off-page列。这些off-page列的值被存储在overflow page的单链表中。每个这种列都有它自己
单独的singly-linked list.根据列长度的不同，在B-tree中存储整个列值或前缀，避免浪费存储。

compact row format:
compact行格式相比于redundant行格式减少了大概20%的行存储空间，但是对于一些操作以增加cpu的使用为代价。如果你的任务是被缓存命中率和
硬盘速度限制，compact格式可能更快。如果你的任务的瓶颈是cpu速度，那么compact格式肯能更慢。
使用compact行格式的表，在B-tree节点的索引记录中存储可变程度的列（varchar，varbinary，blob，text）的前768字节，剩下的存储在
overflow page中。超过768字节的固定长度列也被当做可变长度列。例如char(255)，当字符集utf8mb4的最大字节长度大于3，则整个列值超过768字节。
如果一个列的值小于768字节，就不会用到overflow page，在某种程度上节省了I/O，因为整个值存储在了B-tree的节点上。
但是这样可能导致B-tree的节点充满了数据而不是key值，降低了效率。

Pages,Extents,Segments,Tablespaces:
每个表空间都是由数据库页组成的。每个表空间都有一样的page size.默认情况下，所有的表空间的page size都是16KB，你可以通过
innodb_page_size设置page size为8或4KB，也可以提高到32或64KB。
对于16KB的page,被分组构成1MB大小的extents（64个连续的16KB page,128个8KB page,256个4KB page）。
对于32KB的page,extent的大小是2MB。对于64KB的page,extent的大小是4MB。在InnodB中，表空间里的文件是segment。
对于表空间中的每一个segment,InnodB一次一个的分配前32个页。之后，InnoDB开始分配整个extent给segment。Innodb一次最多可以添加4个
extent到一个大的segment，确保数据良好的有序性。
在InnoDB中，为每个index分配2个segment。一个用于B-tree的非叶子节点，另一个是叶子节点。保持叶子节点在硬盘上的连续性可以有更好
的I/O操作，因为这些叶子节点包含实际的表数据。
有一些page包含其他page的bitmap,因此一些extent不能整个分配给segment，只能作为单独的page。


对于4KB，8KB，16KB，32KB的page,maximum row length略小于page size的一半。例如，对于16KB page,最大行长度略小于8KB。
但对于64KB的页，最大行长度略小于16KB。
如果一行记录不超过最大行长度，则这行记录的所有列都存在page中。如果超过了最大行长度，对于变长的列被选择external off-page 存储直到行大小
满足最大行长度限制。对于可变长度列的external off-page 存储根据row format的不同而不同。
对于compact和redundant行格式：
当一个可变长度的列被选择进行external off-page存储，InnodB存储这一列前768字节在数据页中，剩下的存在overflow page。除了这
768字节的前缀，还有20字节的值存储这一列真实的长度并指向存储其余数据的overflow list。
对于dynamic和compressed行格式：
当一个变长的列选择external off-page存储，InnoDB在行中存储20字节的指针，剩下的存在overflow page。

Redo log:
redo log是基于硬盘的数据结构，用于在崩溃恢复期间纠正由未完成事务写入的数据。在正常操作过程中，redo log可以记录下来自于sql语句
和低级API调用改变表数据的请求。在未预见的宕机之前，那些还没完成更新数据文件的修改操作，会被自动重新执行在MySQL实例初始化期间以及
在接收连接之前。
只需要重启MySQL服务器就可以从故障中恢复。InnoDB会自动检查日志并回滚数据库。InnoDB自动回滚在宕机发生时未提交的事务。（日志输出图在MySQL技术文档2594页。）
InnoDB宕机恢复有以下几个步骤组成：
1）表空间发现
InnoDB通过表空间发现过程判断哪些表空间需要redo log application。
**表空间发现：表空间发现
如果在恢复期间，InnoDB遇到上个checkpoint之后写入的redo log，则这些redo log必须应用到受影响的表空间。在恢复过程中识别受影响
表空间的过程称为tablespace discovery.
表空间发现是通过扫描redo log,从上一个checkpoint到log文件结尾，寻找MLOG_FILE_NAME中的记录，这些记录是当一个表空间页被修改时写入的。
一条MLOG_FILE_NAME记录包含表空间ID和文件名。
在服务器启动时，InnoDB打开系统表空间和redo log。如果自从上个checkpoint之后有新的redo log记录，则基于MLOG_FILE_NAME记录打开受到影响的
表空间文件。
MLOG_FILE_NAME记录对于所有的持久化的表空间类型都可以写入，包括file-per-table表空间，general tablespaces,system tablespaces,undo log tablespaces。
基于redo log的发现具有以下特点：
1）只有自从上个checkpoint之后修改的表空间*.ibd文件会被访问。
2）
2）redo log application
redo log application是在初始化期间以及在接收连接之前执行的。在宕机时，如果所有的改变都从buffer pool刷新到tablespaces(ibdata*和*.ibd文件)，
则redo log application可以跳过。如果在启动时，redo log文件丢失了，InnoDB也会跳过redo log application.
删除redo log来加速故障恢复是不推荐的，即使一些数据丢失是可以接受的。
3）不完整事务的回滚
不完整事务指的是那些宕机时还活跃的事务。回滚未完成事务所花费的时间可以是事务在中断之前处于活动状态的时间量的三倍或四倍，具体取决于服务器负载。
你不能取消正在执行回滚的事务。在一些极端案例中，当回滚事务预期花费时间过长，通过启动InnoDB设置innodb_force_recovery为3或更大
可以加快启动过程。
4）change buffer merge
将change buffer（系统表空间的一部分）中的更改应用于二级索引的叶子节点页，因为索引页将读取到buffer pool。
5)purge
删除有删除标记的记录，对于活跃的事务不再可见。

redo log application之后的步骤不依赖于redo log（除了用于记录写入），并且与正常处理并行执行。在这些步骤中，只有不完整事务的
回滚对于故障恢复是特殊的。最后两个步骤在正常处理期间被执行。
在redo log application之后，InnoDB尝试尽可能早的接受连接，减少停机时间。事务回滚是由后台线程执行的，与新连接的事务并行执行。
直到回滚完成之后，新连接才可能会遇到与已恢复事务有锁冲突。

--表级锁的争用状态变量
show status like 'table%';
--行级锁的争用状态变量
show status like 'innodb_row_lock%'

消息队列的优点：
1）解耦
未使用消息队列时：当一个系统A产生的数据其他多个系统都感兴趣时，这时系统A需要在项目里分别调用多个系统发送数据，这时如果有新的系统需要这些数据或者原有的系统因为业务的变化不再需要系统A的数据，
这时系统A就需要不断修改代码来满足下游系统的需要，这样做使得系统之间耦合度较高，此外系统A还要在代码里考虑调用下游系统时超时或者下游系统宕机这些异常处理。
使用消息队列之后：系统A可以把关键数据发送到消息队列中，之后下游系统需要这些数据直接订阅这些队列即可，下游系统业务的变动不影响系统A，耦合度明显降低。系统A不需要考虑要给谁发送数据，不需要考虑下游系统
获取队列数据是否成功或失败超时等问题。
面试技巧：需要去考虑自己负责的系统中是否有类似的场景，就是一个系统或者一个模块调用了多个系统或者模块，互相之间的调用很复杂，维护起来很麻烦。但是其实这个调用是不需要直接同步调用接口的，如果使用
MQ异步化解耦，也是可以的。就需要考虑在自己的项目里运用MQ进行系统的解耦。

2）异步
未使用消息队列时：在系统A接口内同步调用多个耗时的接口，会导致系统A的整个响应时间很高。
使用消息队列之后：通过在系统A内发布消息到消息队列中，由下游系统订阅消费执行耗时操作，从而降低系统A的响应时间。这种适用于系统A不需要同步获取下游系统的执行结果。如果系统A需要获取调用结果之后再响应用户，
这时可以使用callable接口，来开启多线程并获取结果后返回。

3）削峰
如果没有做任何的防护策略，当有大量请求同时调用系统时，由于mysql往往是系统的瓶颈，可以建立的连接数是有限的，这时如果将所有的请求都直接打到MySQL上，则会导致MySQL崩溃，从而影响系统的正常使用。
使用MQ削峰：当有大量请求涌入系统时，可以先将请求放进消息队列中，然后按照系统的实际能力异步从消息队列中获取请求处理，这样做可以保证系统运行在安全范围内。

缺点：
1）系统可用性降低：系统引入的外部依赖越多，越容易挂掉，引入MQ之后，若MQ崩溃则系统不可用。
2）系统复杂性提高：与MQ相关的问题很多，比如消息的重复消费，处理消息丢失，保证消息的顺序性。
2）一致性问题：异步调用会导致系统A响应成功不代表后续下游系统消费消息执行也同样成功，如果系统A成功而下游系统失败则会导致数据不一致。

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class IPCount {

    /**
      * IPv4地址转换成数字
      * @param ip
    */
    public long ipv4ToNumber(String ip) {
        long rs = 0;
        if (ip == null || ip.isEmpty()) {
            return rs;
        }
        String[] ips = ip.split("\\.");
        for (int i = 0; i < ips.length; i++) {
            rs += Integer.parseInt(ips[i]) * Math.pow(256, (3 - i));
        }
        return rs;
    }
    
    /**
     * 数字转换成IPv4地址
     * @param number
     * @return
     */
    public String numberToIpv4(long number) {
        String ip = "";
        List<String> ips = new ArrayList<String>();
        for (int i = 0; i < 8; i++) {
            ips.add(String.valueOf(number % 256));
            number = number >> 8;
        }
        for (int i = ips.size() - 1; i >= 0; i--) {
            ip = ip.concat(ips.get(i));
            if (i > 0) {
                ip = ip.concat(".");
            }
        }
        return ip;
    }
    
    /**
     * IPv6地址转换成数字
     * @param ip
     * @return
     */
    public BigInteger ipv6ToNumber(String ip) {
        String[] ips = ip.split(":");
        BigInteger rs = new BigInteger("0");
        
        for (int i = 0; i < ips.length; i++) {
            BigInteger a = BigInteger.valueOf(Integer.parseInt(ips[i], 16));
            BigInteger b = BigInteger.valueOf(65536).pow(7 - i);
            BigInteger c = a.multiply(b);
            rs = rs.add(c);
        }
        return rs;
    }
    
    /**
     * 数字转换成IPV6地址
     * @param number
     * @return
     */
    public String numberToIpv6(BigInteger number) {
        String ip = "";
        List<String> ips = new ArrayList<String>();
        
        for (int i = 0; i < 8; i++) {
            ips.add(Integer.toHexString(number.divideAndRemainder(BigInteger.valueOf(65536))[1].intValue()));
            number = number.shiftRight(16);
        }
        
        for (int i = ips.size() - 1; i >= 0; i--) {
            ip = ip.concat(ips.get(i));
            if (i > 0) {
                ip = ip.concat(":");
            }
        }
        return ip;
    }
    
    /**
     * 查找两个IP地址之间的IP
     * @param startIp
     * @param endIp
     * @return
     */
    public List<String> findIPs(String startIp, String endIp) {
        BigInteger startNumber = this.ipv6ToNumber(startIp);
        BigInteger endNumber = this.ipv6ToNumber(endIp).add(BigInteger.valueOf(1));
        List<String> ips = new ArrayList<String>();
        while (startNumber.compareTo(endNumber) < 0) {
            ips.add(this.numberToIpv6(startNumber));
            startNumber = startNumber.add(BigInteger.valueOf(1));
        }
        return ips;
    }
}

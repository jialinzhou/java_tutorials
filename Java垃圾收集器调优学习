1.	什么是垃圾收集器
垃圾收集器（GC）可以自动管理应用的动态内存分配请求。
垃圾收集器通过以下操作进行动态内存管理：
	从操作系统中分配和回收内存
	当应用请求分配内存时分配给它
	确定哪些内存仍然被应用使用
	回收未使用的内存以供应用程序重用

Java Hotspot垃圾收集器使用不同的技术提升上述操作的效率：
	使用分代回收结合年龄，把注意力集中在最可能有大量可回收内存的区域----堆。
	使用多个线程并行操作，或者在应用后台并发执行一些长运行的操作。
	通过整理存活的对象，尽可能恢复出更大连续可用内存。

2.	为什么垃圾收集器的选择很重要？
垃圾收集器的目的就是把应用开发者从手动管理内存中释放出来。开发者不需要分配和释放内存，也不需要关心分配的动态内存的生命周期。这样做可以避免一些由于内存管理不当导致的错误。

3.	一些默认的选择
These are important garbage collector, heap size, and runtime compiler default
selections:
• Garbage-First (G1) collector
• The maximum number of GC threads is limited by heap size and available CPU
resources
• Initial heap size of 1/64 of physical memory
• Maximum heap size of 1/4 of physical memory
• Tiered compiler, using both C1 and C2

4.	基于行为的调优
两大目标：暂停时间（pause-time）和吞吐量（application throughput）。
当一个目标达到了，垃圾收集器会尽可能最优化另外一个。自然，这两个目标总是不能同时满足。
	Pause-Time Goal
暂停时间是指：垃圾收集器停止应用程序，回收不再被使用的内存空间这段时间。
如果平均暂停时间加上方差，大于暂停时间的目标，则认为目标没有达成。
可以通过命令行参数：-XX:MaxGCPauseMillis=<nnn>配置
调整这个参数可能导致：垃圾收集更频繁的出现，减少应用的吞吐量。

	Throughput Goal
The goal is specified by the command-line option -XX:GCTimeRatio=nnn. The ratio of
garbage collection time to application time is 1/ (1+nnn). For example, -XX:GCTimeRatio=19 sets a goal of 1/20th or 5% of the total time for garbage collection
垃圾收集的时间是：所有垃圾收集引发的暂停时间总和。
如果吞吐量目标没有达到，垃圾收集器可能会增加堆空间，这样做才可以让两次垃圾收集暂停之间的应用时间变长。

5.	调优策略
不要为堆选择一个最大值，除非你知道你的堆空间需要大于默认的最大堆空间。
应用的行为可以导致堆空间增加或减少。例如，如果应用开始以更高的速率分配空间，那么堆空间会增加以维持吞吐量不变。
如果堆空间增加到他的最大值，并且吞吐量的目标还是没有达到，则设置的最大堆空间对于吞吐量目标来说太小了。这种情况可以设置最大堆空间大小接近于物理内存大小，但是确保不要引发应用swapping。再次执行应用，如果吞吐量目标还是没有达到，则说明吞吐量目标定得太高了。
如果吞吐量目标已经满足了，但是暂停太长时间，之后选择暂停时间作为目标。这就意味着吞吐量的目标将不会满足，这种情况可以选择一个应用可以接受的值。


二、影响垃圾收集性能的因素
1.Total Heap
影响垃圾收集性能最重要的因素就是总的可用内存。因为垃圾收集出现在每个代空间装满时，吞吐量与可用内存成反比。
2.The Young Generation
第二个影响垃圾收集性能的是年轻代的大小
年轻代越大，minor GC的频率越低。然而，对于一个固定大小的堆空间，更大的年轻代空间意味着更小的老年代空间，这将会增加major GC的频率。最优的选择依赖应用分配的对象生命周期分布情况。
年轻代大小是通过-XX:NewRatio 控制的。
例如-XX:NewRatio=3意味着，年轻代：老年代=1:3。换句话说就是Eden区加上survivor区是整个堆空间的四分之一。

快速分配对象内存空间：
在大多数情况下，会有很多很大的连续可用内存，在这种内存空间上分配对象内存是很有效的，使用简单的bump-the-pointer（指针碰撞）技术。
对于多线程应用来说，分配操作需要保证多线程安全。如果使用全局锁来保证多线程安全的话，则在代上分配空间将会变成瓶颈，降低性能。
因此，Hotspot JVM采用了一种Thread-Local Allocation Buffers（TLABs）技术。通过给每个线程一个自己的buffer（也就是一个小的代空间）用于分配空间，这样可以提高多线程的分配吞吐量。因为在每个TLAB上只有一个线程可以分配内存，并且可以使用指针碰撞技术，不需要任何锁。只是在很少的情况下，当一个线程把它自己的TLAB使用完了，需要得到一个新的TLAB时需要同步操作。通过把TLAB和指针碰撞技术结合起来，每次分配内存只需要大约10个本地指令，效率很高。

Serial Collector
使用串行垃圾收集器，年轻代和老年代的垃圾收集都是串行的（使用单个CPU），以stop the world的方式进行。这就是说，当垃圾收集发生时，应用将会被暂停执行。
什么时候使用串行垃圾收集器：
适合于一些客户端机器，不需要很低的暂停时间。可以有效管理堆内存大小在64M左右，最差的full gc暂停时间大约0.5秒。设置参数-XX:+UseSerialGC可以指定为串行垃圾收集器。

Parallel Collector
现如今，需要Java应用都运行在有着很大物理内存和多核CPU的机器上。Parallel collector，也被称作throughput collector，就是被开发出来利用多核CPU的优势，而不是让大部分的CPU都处于空闲状态，只有一个CP用于gc工作。
年轻代垃圾收集，串行和并行比较
 
什么时候使用并行垃圾收集器：
那些有多核CPU的机器并且没有暂停时间要求的可以使用。因为老年代垃圾收集仍然会出现，虽然暂停时间不太常出现，但是出现的话通常时间会长
使用-XX:+UseParallelGC设置使用并行垃圾收集器

CMS Collector：
对于许多应用来说，快速的响应时间比吞吐量更重要。而且，通常情况下，年轻代垃圾收集不会造成长暂停。然而，老年代垃圾收集虽然次数不多，但是通常会引发长暂停，尤其是堆内存很大时。为了解决这个问题，引入了CMS，号称 low-latency collector。
年轻代收集：跟并行垃圾收集器一样。
老年代收集：
 
CMS是唯一一个非整理的垃圾收集器。这就是说，当空间回收之后，它不对老年代进行整理。
缺点：
1.	因为回收的空间是不连续的，因此收集器不能使用简单的指针碰撞技术来分配下个对象。取而代之，它需要一个free list。每次需要分配空间给一个对象时，通过查找free list找到足够大的空间来分配。很明显这样做的代价比指针碰撞技术高。这也间接的给年轻代垃圾收集带来负担，因为老年代分配空间大部分发生在年轻代垃圾收集时。
2.	另一个缺点是，CMS需要更大的堆内存。因为只有这样才能让应用在标记阶段，还能继续分配内存，使老年代空间使用更多。此外，尽管，cms保证在标记阶段可以识别所有的存活对象，但是一些对象可能在这个过程中变成垃圾，并且不能被回收，直到下次老年代垃圾收集。这些对象被称作floating garbage。
最后，不像其他垃圾收集器，CMS不会等到老年代变满时才进行老年代收集。他会足够早的进行。否则stop the world时间会比并行和串行垃圾收集器更耗时。
总结来说：相比于并行垃圾收集器，CMS有时可以大幅减少老年代暂停时间，以轻微的更长年轻代暂停，吞吐量稍减，更大的堆内存为代价。


串行垃圾回收器（serial）：它为单线程环境设计且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境。
并行垃圾回收期（parallel）：多个垃圾收集线程并行工作，此时用户线程是暂停的，使用于科学计算/大数据处理后台处理等弱交互场景。
并发垃圾回收器（CMS）：用户线程和垃圾收集线程同时执行（不一定是并行，可能交替执行），不需要停顿用户线程，互联网公司多用它，适用对响应时间有要求的场景。

查看jvm默认的垃圾收集器：java –XX:+PrintCommandLineFlags -version


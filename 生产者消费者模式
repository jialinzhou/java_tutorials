1.传统方式
class ShareData{
	private int number = 0;
	private Lock lock = new ReentrantLock();
	private Condition condition = lock.newCondition();
	
	public void increment() throws Exception{
		lock.lock();
		try{
			//判断
		while(number != 0){
			//等待
			condition.await();
			
		}
		number++;
		
		//通知唤醒
		condition.signalAll();
			
		}catch (Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
		
		
	}
	
	public void decrement() throws Exception{
		lock.lock();
		try{
			//判断
		while(number == 0){
			//等待
			condition.await();
			
		}
		number--;
		
		//通知唤醒
		condition.signalAll();
			
		}catch (Exception e){
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
		
		
	}
}

/**
1. 线程  操作  资源类
2. 判断  干活   通知
3.防止虚假唤醒机制
*/

public class ProdConsumer_TraditionDemo{
	public static void main(String[] args){
		ShareData shareData = new ShareData();
		new Thread(()->{
				for(int j=0;j<5;j++){
					shareData.increment();
				}
			}).start();
			
		new Thread(()->{
				for(int j=0;j<5;j++){
					shareData.decrement();
				}
			}).start();
	}
}

2.

synchronized和lock有什么区别？用新的lock有什么好处？
答：
1.原始构成
synchronized是关键字属于jvm层面，monitorenter，monitorexit，底层是通过monitor对象来完成的，其实wait和notify等方法也
依赖于monitor对象只有在同步块或方法中才能调wait/notify等方法
lock是具体类（java.util.concurrent.locks.Lock）是api层面的锁
2.使用方法
synchronized不需要用户去手动释放锁，当synchronized代码执行完后系统会自动让线程释放对锁的占用。
ReentrantLock则需要用户手动释放锁，若没有主动释放锁，就有可能出现死锁现象。需要lock()和unlock()方法配合try/finally
语句块来完成
3.等待是否可中断
synchronized不可中断，除非抛出异常或者正常运行完成
ReentrantLock可中断，1.设置超时方法tryLock(long timeout, TimeUnit unit) 2.lockInterruptibly()放代码块中，
调用interrupt（）方法可中断
4.加锁是否公平
synchronized非公平锁
ReentrantLock默认非公平锁，可以设置为公平锁
5.锁绑定多个条件Condition
Synchronized没有
ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchronized要么随机唤醒一个线程要么唤醒全部线程

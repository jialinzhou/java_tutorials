微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事，从技术角度看就是一种小而独立的处理过程，类似进程概念，能够自行单独启动或销毁，拥有自己独立的数据库。

RPC两个核心模块：通讯，序列化。
RPC框架有很多如：dubbo、gRPC、Thrift、HSF（High Service Framework）



高可用：
1.	zookeeper宕机与dubbo直连
现象，zookeeper注册中心宕机，还可以消费dubbo暴露的服务。
原因：健壮性
1）	监控中心宕机不影响使用，只是丢失部分采样数据
2）	数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务
3）	注册中心对等集群，任意一台宕掉后，将自动切换到另一台
4）	注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯
5）	服务提供者无状态，任意一台宕掉后，不影响使用
6）	服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。
Dubbo可以通过url直连的方式，不通过注册中心调用服务@Reference(url=”127.0.0.1:20882”)


2.	服务降级
当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心交易正常运作或高效运作。
可以通过服务降级功能临时屏蔽某个出错的非关键服务，并定义降级后的返回策略。
